import os
import re


class ScriptDatabase:
    def __init__(self):
        self.root_path = os.path.dirname(os.path.realpath(__file__))
        self.database_path = self.find_database_dir()
        self.scripts = self.scan_for_scripts()

    def find_database_dir(self):
        # Search for a directory named "database" within the root path
        for dirpath, dirnames, filenames in os.walk(self.root_path):
            if "database" in dirnames:
                return os.path.join(dirpath, "database")
        return None

    def scan_for_scripts(self):
        scripts_dict = {}
        if self.database_path:
            for dirpath, dirnames, filenames in os.walk(self.database_path):
                for filename in filenames:
                    full_path = os.path.join(dirpath, filename)
                    relative_path = os.path.relpath(full_path, start=self.database_path)
                    relative_path = relative_path.replace(filename, "")
                    description = self.extract_description(full_path)
                    scripts_dict[filename] = {
                        'location': relative_path,
                        'description': description
                    }
        return scripts_dict

    def extract_description(self, file_path):
        try:
            with open(file_path, 'r') as file:
                first_line = file.readline().strip()
            return first_line
        except IOError as e:
            print(f"Error reading file {file_path}: {e}")
            return ""

    def list_scripts(self):
        for name, details in self.scripts.items():
            print(f"{name}: Location: {details['location']}, Description: {details['description']}")

    def search_scripts(self):
        while True:
            search_type = input("Search by 'location', 'description', or 'both' (type '0' to exit): ")
            if search_type == '0':
                break
            search_term = input("Enter search term (regular expression): ")
            pattern = re.compile(search_term, re.IGNORECASE)

            print("Search Results:")
            for name, details in self.scripts.items():
                if search_type == 'location' and pattern.search(details['location']):
                    print(f"{name}: Location: {details['location']}, Description: {details['description']}")
                elif search_type == 'description' and pattern.search(details['description']):
                    print(f"{name}: Location: {details['location']}, Description: {details['description']}")
                elif search_type == 'both' and (
                        pattern.search(details['location']) or pattern.search(details['description'])):
                    print(f"{name}: Location: {details['location']}, Description: {details['description']}")
