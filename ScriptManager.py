import os
import subprocess


class ScriptManager:
    def __init__(self):
        self.base_path = os.path.dirname(os.path.realpath(__file__))  # Set to the directory of the script
        self.current_dir = self.base_path

    def run(self):
        print("Type 'help' for a list of commands.")
        while True:
            command_input = input(f"{self.current_dir}> ").strip()
            if command_input in ['exit', 'quit']:
                print("Exiting the CLI.")
                break
            self.parse_command(command_input)

    def parse_command(self, command_input):
        parts = command_input.split()
        command = parts[0]
        args = parts[1:] if len(parts) > 1 else []

        commands = {
            'cd': self.change_directory,
            'ls': self.list_directory,
            'execute': self.execute_script,
            'modify': self.modify_script,
            'add': self.add_script,
            'remove': self.remove_script,
            'help': self.show_help
        }

        if command in commands:
            commands[command](*args)
        else:
            print("Unknown command. Type 'help' for a list of commands.")

    def change_directory(self, new_dir=None):
        if new_dir:
            potential_path = os.path.join(self.current_dir, new_dir)
            if os.path.exists(potential_path) and os.path.isdir(potential_path):
                # Normalize the path to remove any redundant '../'
                self.current_dir = os.path.normpath(potential_path)
            else:
                print("No such directory.")
        else:
            print("No directory specified.")

    def list_directory(self):
        try:
            for item in os.listdir(self.current_dir):
                print(item)
        except Exception as e:
            print(f"Error listing directory: {e}")

    def execute_script(self, script_name):
        script_path = os.path.join(self.current_dir, script_name)
        if os.path.isfile(script_path):
            if script_path.endswith('.ps1'):
                # Run PowerShell and execute the script
                result = subprocess.run(["powershell.exe", "-File", script_path], shell=True, text=True,
                                        capture_output=True)
            else:
                # For other file types, simply execute as before
                result = subprocess.run(script_path, shell=True, text=True, capture_output=True)
            print(f"Execution Output:\n{result.stdout}\nError Output:\n{result.stderr}")
        else:
            print("Script not found.")

    def modify_script(self, script_name, new_content):
        script_path = os.path.join(self.current_dir, script_name)
        if os.path.isfile(script_path):
            with open(script_path, 'a') as file:
                file.write(new_content)
            print("Script modified.")
        else:
            print("Script not found.")

    def add_script(self, script_name, content):
        script_path = os.path.join(self.current_dir, script_name)
        with open(script_path, 'w') as file:
            file.write(content)
        print("Script added.")

    def remove_script(self, script_name):
        script_path = os.path.join(self.current_dir, script_name)
        if os.path.isfile(script_path):
            os.remove(script_path)
            print("Script removed.")
        else:
            print("Script not found.")

    def show_help(self):
        print("""
    Available Commands:
      cd <directory> - Change the current directory
      ls - List directory contents
      execute <script_name> - Execute a script
      modify <script_name> <'new_content'> - Modify a script
      add <script_name> <'content'> - Add a new script
      remove <script_name> - Remove a script
      help - Show this help message
      exit or quit - Exit the script manager
    """)
