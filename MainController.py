import argparse
from CommandExecutor import CommandExecutor
from InputManager import InputManager
from OutputCollector import OutputCollector
from ScriptDatabase import ScriptDatabase
from ScriptManager import ScriptManager


class MainController:
    def __init__(self):
        self.input_manager = InputManager()
        self.output_collector = OutputCollector()
        self.script_database = ScriptDatabase()
        self.script_manager = ScriptManager()
        self.running = True

    def run(self):
        print("Starting autoPentestCat framework")

        while self.running:
            print("\nChoose framework to run")
            print("1. Command executor")
            print("2. Script manager")
            print("3. Search and List Scripts")
            print("4. Exit")

            choice = input("> ").strip()

            if choice == '1':
                self.input_manager.main_menu()

                commands = self.input_manager.get_commands()
                print("Save output to file?(y/n)")
                answer = input("> ")

                if commands:
                    executor = CommandExecutor(commands, self.output_collector)
                    executor.execute_commands()
                    if answer.lower() == "y":
                        file_name = input("Enter output file name: ")
                        self.output_collector.write_outputs_to_file(file_name)
                    else:
                        self.output_collector.display_outputs()
                else:
                    print("No commands to execute.")
            elif choice == '2':
                self.script_manager.run()
            elif choice == '3':
                self.manage_scripts_database()
            elif choice == '4':
                self.exit_application()
            else:
                print("Invalid option, please try again.")

    def manage_scripts_database(self):
        print("\nScript Database Management:")
        print("1. List All Scripts")
        print("2. Search Scripts")

        choice = input("Choose an option: ").strip()

        if choice == '1':
            self.script_database.list_scripts()
        elif choice == '2':
            self.script_database.search_scripts()
        else:
            print("Invalid option, please return to the main menu.")

    def exit_application(self):
        print("Exiting the application...")
        self.running = False


def parse_args():
    parser = argparse.ArgumentParser(description="Description of the project to be added\n")
    parser.add_argument("-v", metavar="--verbose", required=False, type=str,
                        help="display and save output in verbose mode")
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    controller = MainController()
    controller.run()
