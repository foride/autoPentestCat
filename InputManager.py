import os


class InputManager:
    def __init__(self):
        self.commands = []

    def main_menu(self):
        while True:
            print("\n1. Enter commands manually")
            print("2. Load commands from a template file")
            print("3. Create a new command template file")
            print("4. Exit")
            choice = input("Select an option: ").strip()

            if choice == '1':
                self.enter_commands_manually()
                break
            elif choice == '2':
                self.load_commands_from_file()
                break
            elif choice == '3':
                self.create_command_template()
            elif choice == '4':
                print("Exiting program.")
                break
            else:
                print("Invalid option, please try again.")

    def load_commands_from_file(self):
        file_name = input("Enter the full path to the template file: ")
        if os.path.exists(file_name):
            with open(file_name, 'r') as file:
                self.commands = [line.strip() for line in file if line.strip()]
            print("Commands loaded successfully.")
        else:
            print("File not found or invalid file type, please try again.")

    def enter_commands_manually(self):
        print("Enter commands to execute (empty input to finish):")
        while True:
            command = input("> ")
            if command == "":
                break
            if self.validate_command(command):
                self.commands.append(command)
            else:
                print("Invalid command, please try again.")

    def create_command_template(self):
        template_name = input("Enter the name for the new command template: ")
        print("Enter commands for the template (empty input to finish):")
        commands = []
        while True:
            command = input("> ")
            if command == "":
                break
            commands.append(command)

        with open(template_name, 'w') as file:
            for command in commands:
                file.write(command + '\n')
        print(f"Template saved as {template_name}.")

    def validate_command(self, command):
        # Basic validation to ensure command is not empty
        return bool(command.strip())

    def get_commands(self):
        return self.commands
